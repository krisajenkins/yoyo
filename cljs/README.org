* ClojureScript - Yo-yo Module

This is a module to automatically re-compile ClojureScript files
within a Yo-yo system. It's been adapted from Malcolm Sparks's
Modular [[https://github.com/juxt/modular/tree/master/modules/cljs/][CLJS module]].

** Dependency

#+BEGIN_SRC clojure
  [jarohen/yoyo.cljs "0.0.3"]
#+END_SRC

** Usage

In your system:

#+BEGIN_SRC clojure
  (:require [yoyo.cljs :refer [with-cljs-compiler]])

  (with-cljs-compiler {:source-paths #{"ui-src"}
                       :target-path "target/cljs/"

                       :web-context-path "/js"

                       :main myapp.ui.app

                       :externs [...]
                       
                       :foreign-libs [{:file "some/classpath/file.js"
                                       :provides ["some.new.namespace"]}]

                       :dev {:optimizations :none
                             :pretty-print? true}

                       :build {:optimizations :advanced
                               :pretty-print? false
                               :classpath-prefix "js"}}
    (fn [cljs-compiler]
      ...))
#+END_SRC

The CLJS module handles the =:output-to= and =:output-dir= etc keys
for you - simply specify a =:target-path=, and the CLJS component will
ensure a consistent directory structure under that.

Clojurescript's 'modules' allow you to split out your CLJS code into
multiple entry points, by defining 'main' namespaces, so that you
don't have to serve up all of your CLJS to each page, if you don't
need to.

The CLJS module also expects =:dev= and =:build= configuration
maps. The =:dev= map is used for normal interactive development - in
this example, it doesn't use any CLJS optimizations, so that your CLJS
is re-compiled quickly.

The =:build= map, on the other hand, is used to pre-compile your CLJS
when your project is built (uberjar'd). In this case, we can use
=:advanced= optimization, to minify the compiled JS and speed up
download times. The =:classpath-prefix=, in this case, is where the
compiler will put the compiled JS files in the built JAR.

The CLJS compiler also provides a number of functions, that you can
use in your own handler:

#+BEGIN_SRC clojure
  (ns myapp.handler
    (:require [yoyo.cljs :as cljs]))

  ;; Returns a handler that will serve CLJS files as required:
  (cljs/cljs-handler cljs-compiler)

  ;; Returns a set of bidi routes that can be included in a route data
  ;; structure:
  (cljs/bidi-routes cljs-compiler)

  ;; Returns the relative URL of the compiled JS file for the main
  ;; JS file, for use in <script src="..." /> tags:
  (cljs/path-for-js cljs-compiler)

  ;; Returns the relative URL of the compiled JS file for the given
  ;; module, for use in <script src="..." /> tags:
  (cljs/path-for-module cljs-compiler :my-module)
#+END_SRC

Your handler might, therefore, look something like this:

#+BEGIN_SRC clojure
  (ns myapp.handler
    (:require [bidi.ring :refer [make-handler]]
              [compojure.core :refer [routes GET]]
              [hiccup.core :refer [include-js]]
              [hiccup.page :refer [html5]]
              [yoyo.cljs :as cljs]))

  (defn handle-page [req cljs-compiler]
    (html5
     [:head
      [:title ...]

      (include-js (cljs/path-for-js cljs-compiler))
      ...]

     [:body
      ...]))

  (defn make-handler [{:keys [cljs-compiler]}]
    ;; e.g. Compojure
    (routes
      (GET "/" {:as req}
        (handle-page req cljs-compiler))

      (cljs/cljs-handler cljs-compiler))

    ;; e.g. Bidi
    (make-handler ["" [{"/" {:get :page-handler}}
                       (cljs/bidi-routes cljs-compiler)]]

                  (some-fn {:page-handler (fn [req]
                                            (handle-page req cljs-compiler))}

                           #(when (fn? %) %))))
#+END_SRC
